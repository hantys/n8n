volumes:
  redis_storage:
  postgres_storage:

networks:
  baserow_n8n_network:
    driver: bridge

x-shared: &shared
  restart: always
  build: .
  environment:
    N8N_TRUST_PROXY: "${N8N_TRUST_PROXY}"
    N8N_RUNNERS_ENABLED: "${N8N_RUNNERS_ENABLED}"
    NODE_ENV: "production"
    N8N_HOST: "${HOST}"
    N8N_PORT: "${N8N_PORT}"
    N8N_PROTOCOL: "${N8N_PROTOCOL}"
    N8N_ENCRYPTION_KEY: "${N8N_ENCRYPTION_KEY}"
    EXECUTIONS_DATA_SAVE_ON_ERROR: "none"
    EXECUTIONS_DATA_SAVE_ON_SUCCESS: "none"
    WEBHOOK_URL: "${WEBHOOK_URL}"
    GENERIC_TIMEZONE: "${GENERIC_TIMEZONE}"
    DB_TYPE: "postgresdb"
    DB_POSTGRESDB_HOST: "${POSTGRES_HOST}"
    DB_POSTGRESDB_DATABASE: "${POSTGRES_DB}"
    DB_POSTGRESDB_USER: "${POSTGRES_USER}"
    DB_POSTGRESDB_PASSWORD: "${POSTGRES_PASSWORD}"
    DB_POSTGRESDB_SSL_REJECT_UNAUTHORIZED: "false" #"true"
    DB_POSTGRESDB_SSL_MODE: disable
    EXECUTIONS_MODE: "queue"
    QUEUE_BULL_REDIS_HOST: "redis"
    QUEUE_BULL_REDIS_PASSWORD: "${REDIS_PASSWORD}"
    QUEUE_HEALTH_CHECK_ACTIVE: "true"
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
  networks:
    - baserow_n8n_network

# x-backend-variables: &backend-variables
#   SECRET_KEY: ${SECRET_KEY:?}
#   BASEROW_JWT_SIGNING_KEY: ${BASEROW_JWT_SIGNING_KEY:-}
#   DATABASE_PASSWORD: ${POSTGRES_PASSWORD:?}
#   REDIS_PASSWORD: ${REDIS_PASSWORD:?}

#   BASEROW_PUBLIC_URL: ${BASEROW_PUBLIC_URL-http://localhost}

#   DATABASE_USER: "baserow"
#   DATABASE_NAME: ${DATABASE_NAME:-baserow}
#   MIGRATE_ON_STARTUP: ${MIGRATE_ON_STARTUP:-true}
#   SYNC_TEMPLATES_ON_STARTUP: ${SYNC_TEMPLATES_ON_STARTUP:-true}

#   PRIVATE_BACKEND_URL: "${PRIVATE_BACKEND_URL}"
#   PUBLIC_BACKEND_URL: "${PRIVATE_BACKEND_URL}"
#   PUBLIC_WEB_FRONTEND_URL: "${PRIVATE_BACKEND_URL}"
#   BASEROW_WEBHOOKS_ALLOW_PRIVATE_ADDRESS: "true"


services:
  browserless:
    image: browserless/chrome:latest
    restart: always
    environment:
      DEBUG: "browserless:*"
      MAX_CONCURRENT_SESSIONS: "5"
      CONNECTION_TIMEOUT: "60000"
      MAX_QUEUE_LENGTH: "20"
      # PREBOOT_CHROME: "true"
      DEMO_MODE: "false"
      ENABLE_DEBUGGER: "false"
      TOKEN: "${BROWSERLESS_TOKEN}"
      PORT: "3000"
      WORKSPACE_DELETE_EXPIRED: "true"
      WORKSPACE_EXPIRE_DAYS: "1"
    networks:
      - baserow_n8n_network

  # ngrok:
  #   container_name: ngrok-n8n
  #   image: ngrok/ngrok:latest
  #   restart: always
  #   environment:
  #     - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN}
  #     - TERM=xterm
  #   command: http --domain=generous-thrush-frankly.ngrok-free.app n8n:5678
  #   ports:
  #     - "4040:4040"
  #   depends_on:
  #     - n8n
  #     - n8n-worker
  #   networks:
  #     - baserow_n8n_network

  # ngrok-evolution:
  #   container_name: ngrok-evolution
  #   image: ngrok/ngrok:latest
  #   restart: always
  #   environment:
  #     - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN_2}
  #     - TERM=xterm
  #   command: http --domain=correct-plainly-warthog.ngrok-free.app localhost:8080
  #   ports:
  #     - "4041:4040"
  #   depends_on:
  #     - n8n
  #     - evolution
  #   networks:
  #     - baserow_n8n_network

  cloudflared:
    image: cloudflare/cloudflared:latest
    restart: always
    command: tunnel --no-autoupdate run --token ${CLOUDFLARED_AUTHTOKEN}
    depends_on:
      - n8n
      - evolution
    networks:
      - baserow_n8n_network

  postgres:
    image: postgres:16
    restart: always
    environment:
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    volumes:
      - postgres_storage:/var/lib/postgresql/data
      - ./data/psql/init:/docker-entrypoint-initdb.d
      - ./data/psql/init/entrypoint.sh:/entrypoint.sh
    command: ["/bin/bash", "/entrypoint.sh"]
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - baserow_n8n_network

  redis:
    image: redis:latest
    restart: always
    command: "redis-server --requirepass ${REDIS_PASSWORD}"
    volumes:
      - ./data/redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - baserow_n8n_network

  evolution:
    image: atendai/evolution-api:homolog  # Substitua por sua imagem, se diferente
    container_name: evolution-api
    restart: always
    env_file:
      - .env.evolution
    ports:
      - "8080:8080"  # Ou a porta correta usada pela API
    environment:
      NODE_ENV: production
      EVOLUTION_PORT: 8080  # Se aplicável
      JWT_SECRET: "${EVOLUTION_JWT_SECRET}"  # Se usar autenticação
      DATABASE_URL: "${EVOLUTION_DATABASE_URL}"  # Se necessário
    volumes:
      - ./data/evolution:/evolution/instances
    networks:
      - baserow_n8n_network
    expose:
      - 8080
    depends_on:
      - "redis"
      - "postgres"

  n8n:
    <<: *shared
    restart: always
    environment:
      N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS: true
      WEBHOOK_URL: "${WEBHOOK_URL}"
    volumes:
      - "./n8n_storage:/home/node/.n8n"
    ports:
      - "5678:5678"
    networks:
      - baserow_n8n_network
    depends_on:
      - "redis"
      - "postgres"
      - "browserless"
      - "evolution"

  n8n-worker:
    <<: *shared
    environment:
      N8N_ENCRYPTION_KEY: "${N8N_ENCRYPTION_KEY}"
      QUEUE_BULL_REDIS_HOST: "redis"
      QUEUE_BULL_REDIS_PASSWORD: "${REDIS_PASSWORD}"
    command: "/bin/sh -c 'sleep 5; n8n worker'"
    depends_on:
      - "n8n"
    networks:
      - baserow_n8n_network

  # baserow:
  #   container_name: baserow
  #   image: baserow/baserow:1.26.1
  #   environment:
  #     <<: *backend-variables
  #   ports:
  #     - "3001:80"
  #   volumes:
  #     - ./baserow_data:/baserow/data
  #   networks:
  #     - baserow_n8n_network
